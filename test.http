### ========================================
### DNS RECORD MANAGEMENT WORKFLOW TESTS
### ========================================
### Based on OpenSRS DNS Zone Commands documentation:
### https://domains.opensrs.guide/docs/dns-zone-commands-overview
### 
### This section demonstrates the complete 5-step workflow:
### 1. Retrieve existing DNS records (get_dns_zone)
### 2. Prepare new record to add
### 3. Merge existing and new records  
### 4. Update DNS zone (set_dns_zone)
### 5. Confirm new record is added
### ========================================

### COMPLETE WORKFLOW DEMONSTRATION
### This endpoint implements the exact workflow described in the requirements

### Step 1-5: Complete DNS Record Management Workflow
### Adds a new A record following the exact 5-step process
POST http://localhost:3001/api/dns/manage-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "A",
    "subdomain": "www",
    "address": "203.0.113.1",
    "ttl": 3600
  },
  "action": "add"
}

### Expected Response demonstrates each workflow step:
### {
###   "success": true,
###   "message": "DNS record added successfully using complete workflow",
###   "workflow": {
###     "step1_retrieve": {
###       "success": true,
###       "recordCount": 2,
###       "records": [
###         {
###           "type": "A",
###           "subdomain": "",
###           "address": "192.0.2.1",
###           "ttl": 3600
###         },
###         {
###           "type": "MX", 
###           "subdomain": "",
###           "address": "mail.example.com",
###           "ttl": 3600,
###           "priority": 10
###         }
###       ]
###     },
###     "step2_prepare": {
###       "original": { "type": "A", "subdomain": "www", "address": "203.0.113.1", "ttl": 3600 },
###       "normalized": { "type": "A", "subdomain": "www", "address": "203.0.113.1", "ttl": 3600 },
###       "action": "add"
###     },
###     "step3_merge": {
###       "action": "added_new",
###       "originalCount": 2,
###       "newCount": 3,
###       "records": [...]
###     },
###     "step4_update": {
###       "success": true,
###       "responseCode": 200,
###       "recordsSet": 3
###     },
###     "step5_confirm": {
###       "success": true,
###       "finalRecordCount": 3,
###       "newRecordFound": true,
###       "allRecords": [...]
###     }
###   },
###   "data": {
###     "domain": "example.com",
###     "action": "add", 
###     "record": { "type": "A", "subdomain": "www", "address": "203.0.113.1", "ttl": 3600 },
###     "totalRecords": 3,
###     "recordAdded": true
###   },
###   "timestamp": "2025-09-16T18:00:00Z"
### }

### Update an existing record using the same workflow
POST http://localhost:3001/api/dns/manage-record
Content-Type: application/json

{
  "domain": "example.com",
  "record": {
    "type": "A",
    "subdomain": "",
    "address": "203.0.113.100",
    "ttl": 7200
  },
  "action": "update"
}

### Add MX record with priority
POST http://localhost:3001/api/dns/manage-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "MX",
    "subdomain": "",
    "address": "mail2.example.com",
    "ttl": 3600,
    "priority": 20
  },
  "action": "add"
}

### Add CNAME record
POST http://localhost:3001/api/dns/manage-record
Content-Type: application/json

{
  "domain": "example.com",
  "record": {
    "type": "CNAME",
    "subdomain": "blog",
    "address": "www.example.com",
    "ttl": 3600
  },
  "action": "add"
}

### ========================================
### INDIVIDUAL WORKFLOW STEP TESTS
### ========================================
### These demonstrate each step of the workflow individually

### STEP 1: Retrieve Existing DNS Records
### Uses get_dns_zone API to fetch current records
GET http://localhost:3001/api/dns/get-zone/testdomainalanjohnchacko.com

### Expected Response:
### {
###   "success": true,
###   "data": {
###     "domain": "example.com",
###     "records": [
###       {
###         "type": "A",
###         "subdomain": "",
###         "address": "192.0.2.1",
###         "ttl": 3600
###       },
###       {
###         "type": "MX",
###         "subdomain": "",
###         "address": "mail.example.com", 
###         "ttl": 3600,
###         "priority": 10
###       }
###     ]
###   },
###   "timestamp": "2025-09-16T18:00:00Z"
### }

### STEP 4: Update DNS Zone with Merged Records
### Uses set_dns_zone API with the complete merged record set
POST http://localhost:3001/api/dns/set-zone
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "records": [
    {
      "type": "A",
      "subdomain": "",
      "address": "192.0.2.1",
      "ttl": 3600
    },
    {
      "type": "MX",
      "subdomain": "",
      "address": "mail.example.com",
      "ttl": 3600,
      "priority": 10
    },
    {
      "type": "A",
      "subdomain": "www",
      "address": "203.0.113.1",
      "ttl": 3600
    }
  ]
}

### Expected Response:
### {
###   "success": true,
###   "data": {
###     "domain": "example.com",
###     "records": [
###       {
###         "type": "A",
###         "subdomain": "",
###         "address": "192.0.2.1", 
###         "ttl": 3600
###       },
###       {
###         "type": "MX",
###         "subdomain": "",
###         "address": "mail.example.com",
###         "ttl": 3600,
###         "priority": 10
###       },
###       {
###         "type": "A",
###         "subdomain": "www",
###         "address": "203.0.113.1",
###         "ttl": 3600
###       }
###     ]
###   },
###   "timestamp": "2025-09-16T18:00:00Z"
### }

### ========================================
### ALTERNATIVE APPROACHES (EXISTING APIS)
### ========================================

### Add single record (uses same workflow internally)
POST http://localhost:3001/api/dns/add-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "A",
    "subdomain": "api",
    "address": "203.0.113.2",
    "ttl": 3600
  }
}

### Update single record (uses same workflow internally)
POST http://localhost:3001/api/dns/update-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "A",
    "subdomain": "www",
    "address": "203.0.113.10",
    "ttl": 7200
  }
}

### Create DNS zone with initial records
POST http://localhost:3001/api/dns/create-zone
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "records": [
    {
      "type": "A",
      "subdomain": "",
      "address": "192.0.2.1",
      "ttl": 3600
    },
    {
      "type": "MX",
      "subdomain": "",
      "address": "mail.newdomain.com",
      "ttl": 3600,
      "priority": 10
    }
  ]
}

### Delete entire DNS zone
DELETE http://localhost:3001/api/dns/delete-zone/testdomainalanjohnchacko.com

### ========================================
### DNS RECORD REMOVAL WORKFLOW TESTS
### ========================================
### These demonstrate DNS record removal using the same safe workflow pattern

### SINGLE RECORD REMOVAL WORKFLOW
### Remove a specific A record with exact address match
POST http://localhost:3001/api/dns/remove-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "A",
    "subdomain": "www",
    "address": "203.0.113.1"
  }
}

### Expected Response demonstrates the removal workflow:
### {
###   "success": true,
###   "message": "DNS record removed successfully using complete workflow",
###   "workflow": {
###     "step1_retrieve": {
###       "success": true,
###       "recordCount": 3,
###       "records": [...]
###     },
###     "step2_identify": {
###       "targetRecord": { "type": "A", "subdomain": "www", "address": "203.0.113.1" },
###       "matchingRecords": [{ "type": "A", "subdomain": "www", "address": "203.0.113.1", "ttl": 3600 }],
###       "matchCount": 1
###     },
###     "step3_filter": {
###       "originalCount": 3,
###       "removedCount": 1,
###       "newCount": 2,
###       "records": [...]
###     },
###     "step4_update": {
###       "success": true,
###       "responseCode": 200,
###       "recordsSet": 2
###     },
###     "step5_confirm": {
###       "success": true,
###       "finalRecordCount": 2,
###       "recordRemoved": true,
###       "allRecords": [...]
###     }
###   },
###   "data": {
###     "domain": "testdomainalanjohnchacko.com",
###     "removedRecord": { "type": "A", "subdomain": "www", "address": "203.0.113.1" },
###     "removedCount": 1,
###     "remainingRecords": 2,
###     "confirmed": true
###   },
###   "timestamp": "2025-09-16T18:00:00Z"
### }

### Remove A record by type and subdomain only (no address specified)
### This will remove the first matching A record for the subdomain
POST http://localhost:3001/api/dns/remove-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "A",
    "subdomain": ""
  }
}

### Remove MX record with priority
POST http://localhost:3001/api/dns/remove-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "MX",
    "subdomain": "",
    "address": "mail2.testdomainalanjohnchacko.com"
  }
}

### Remove CNAME record
POST http://localhost:3001/api/dns/remove-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "CNAME",
    "subdomain": "blog"
  }
}

### Remove TXT record
POST http://localhost:3001/api/dns/remove-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "TXT",
    "subdomain": "",
    "address": "v=spf1 include:_spf.google.com ~all"
  }
}

### ========================================
### BULK RECORD REMOVAL
### ========================================

### Remove multiple records in one operation
POST http://localhost:3001/api/dns/remove-records
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "records": [
    {
      "type": "A",
      "subdomain": "api",
      "address": "203.0.113.2"
    },
    {
      "type": "A", 
      "subdomain": "cdn"
    },
    {
      "type": "CNAME",
      "subdomain": "www"
    }
  ]
}

### Expected Response:
### {
###   "success": true,
###   "message": "Successfully removed 3 DNS record(s)",
###   "data": {
###     "domain": "testdomainalanjohnchacko.com",
###     "removedCount": 3,
###     "remainingRecords": 2,
###     "removalCriteria": [
###       { "type": "A", "subdomain": "api", "address": "203.0.113.2" },
###       { "type": "A", "subdomain": "cdn", "address": null },
###       { "type": "CNAME", "subdomain": "www", "address": null }
###     ]
###   },
###   "timestamp": "2025-09-16T18:00:00Z"
### }

### ========================================
### ERROR SCENARIOS FOR RECORD REMOVAL
### ========================================

### Attempt to remove non-existent record
POST http://localhost:3001/api/dns/remove-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "A",
    "subdomain": "nonexistent",
    "address": "1.2.3.4"
  }
}

### Expected Error Response:
### {
###   "success": false,
###   "error": "No matching DNS record found. Type: A, Subdomain: \"nonexistent\", Address: 1.2.3.4",
###   "availableRecords": [...],
###   "workflow": {...},
###   "timestamp": "2025-09-16T18:00:00Z"
### }

### Attempt to remove with ambiguous criteria (multiple matches, no address)
POST http://localhost:3001/api/dns/remove-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "A",
    "subdomain": ""
  }
}

### Expected Error Response (if multiple A records exist for root domain):
### {
###   "success": false,
###   "error": "Multiple matching records found (2). Please specify the 'address' field to identify which record to remove.",
###   "matchingRecords": [...],
###   "workflow": {...},
###   "timestamp": "2025-09-16T18:00:00Z"
### }

### Attempt to remove from non-existent domain
POST http://localhost:3001/api/dns/remove-record
Content-Type: application/json

{
  "domain": "nonexistentdomain12345.com",
  "record": {
    "type": "A",
    "subdomain": "www"
  }
}

### ========================================
### VERIFICATION AFTER REMOVAL
### ========================================

### Get DNS zone to verify removal
GET http://localhost:3001/api/dns/get-zone/testdomainalanjohnchacko.com

### ========================================
### PRACTICAL REMOVAL SCENARIOS
### ========================================

### Remove all www records (useful for switching to root domain)
POST http://localhost:3001/api/dns/remove-records
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "records": [
    {
      "type": "A",
      "subdomain": "www"
    },
    {
      "type": "AAAA",
      "subdomain": "www"
    },
    {
      "type": "CNAME",
      "subdomain": "www"
    }
  ]
}

### Remove all subdomain records (cleanup operation)
POST http://localhost:3001/api/dns/remove-records
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "records": [
    {
      "type": "A",
      "subdomain": "api"
    },
    {
      "type": "A",
      "subdomain": "cdn"
    },
    {
      "type": "A",
      "subdomain": "blog"
    },
    {
      "type": "CNAME",
      "subdomain": "mail"
    }
  ]
}

### Remove old mail server records before adding new ones
POST http://localhost:3001/api/dns/remove-records
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "records": [
    {
      "type": "MX",
      "subdomain": "",
      "address": "oldmail.testdomainalanjohnchacko.com"
    },
    {
      "type": "TXT",
      "subdomain": "",
      "address": "v=spf1 include:oldprovider.com ~all"
    }
  ]
}

### ========================================
### DOMAIN SEARCH API TESTS
### ========================================
### Based on OpenSRS API documentation
### - Domain Lookup: https://domains.opensrs.guide/docs/lookup-domain
### - Get Price: https://domains.opensrs.guide/docs/get_price  
### - Name Suggest: https://domains.opensrs.guide/docs/name_suggest
### ========================================

### 1. Combined Domain Search with Suggestions and Pricing
### This endpoint combines all three OpenSRS APIs to provide
### a complete search result with availability and pricing
POST http://localhost:3001/api/domains/search
Content-Type: application/json

{
  "search_query": "techssss"
}

### Expected Response Format:
### {
###   "search_query": "alan",
###   "suggestions": [
###     {
###       "domain": "alan.com",
###       "availability": "available",
###       "price": 11.50,
###       "currency": "USD"
###     },
###     {
###       "domain": "alan.net", 
###       "availability": "taken",
###       "price": null,
###       "currency": null
###     }
###   ]
### }

### ========================================
### INDIVIDUAL API ENDPOINTS
### ========================================

### 2. Domain Lookup (Single Domain Availability Check)
### Based on: https://domains.opensrs.guide/docs/lookup-domain
POST http://localhost:3001/api/domains/lookup
Content-Type: application/json

{
  "domain": "alan.com"
}

### 3. Domain Lookup - Test with Different Domain
POST http://localhost:3001/api/domains/lookup
Content-Type: application/json

{
  "domain": "example-test-domain-123.com"
}

### 4. Get Domain Price
### Based on: https://domains.opensrs.guide/docs/get_price
GET http://localhost:3001/api/domains/alan.com/price

### 5. Get Domain Price - Different Domain
GET http://localhost:3001/api/domains/example.org/price

### 6. Name Suggestions
### Based on: https://domains.opensrs.guide/docs/name_suggest
POST http://localhost:3001/api/domains/suggestions
Content-Type: application/json

{
  "search_string": "alan"
}

### 7. Name Suggestions - Different Search
POST http://localhost:3001/api/domains/suggestions
Content-Type: application/json

{
  "search_string": "technology"
}

### ========================================
### TESTING DIFFERENT SCENARIOS
### ========================================

### 8. Search for Common Name
POST http://localhost:3001/api/domains/search
Content-Type: application/json

{
  "search_query": "john"
}

### 9. Search for Business Term  
POST http://localhost:3001/api/domains/search
Content-Type: application/json

{
  "search_query": "tech"
}

### 10. Search for Unique Name
POST http://localhost:3001/api/domains/search
Content-Type: application/json

{
  "search_query": "myuniquecompany123"
}

### ========================================
### ERROR TESTING
### ========================================

### 11. Missing search_query parameter
POST http://localhost:3001/api/domains/search
Content-Type: application/json

{
}

### 12. Missing domain parameter
POST http://localhost:3001/api/domains/lookup
Content-Type: application/json

{
}

### 13. Missing search_string parameter
POST http://localhost:3001/api/domains/suggestions
Content-Type: application/json

{
}

### ========================================
### HEALTH CHECK
### ========================================

### 14. Server Health Check
GET http://localhost:3001/health

### ========================================
### CACHE MANAGEMENT
### ========================================

### 15. Get Cache Statistics
GET http://localhost:3001/api/domains/cache/stats

### 16. Clear Expired Cache Entries
POST http://localhost:3001/api/domains/cache/clear

### ========================================
### PERFORMANCE TESTING
### ========================================

### 17. Test Cache Performance - First Request (uncached)
POST http://localhost:3001/api/domains/search
Content-Type: application/json

{
  "search_query": "performance"
}

### 18. Test Cache Performance - Second Request (should be faster with cache)
POST http://localhost:3001/api/domains/search
Content-Type: application/json

{
  "search_query": "performance"
}

### ========================================
### DOMAIN MODIFICATION API TESTS
### ========================================

### 19. Modify Domain Auto-Renew Settings
### Enable auto-renew and disable let-expire
PUT http://localhost:3001/api/domains/example.com/autorenew
Content-Type: application/json

{
  "autoRenew": true,
  "letExpire": false
}

### 20. Modify Domain Auto-Renew Settings (Alternative format)
### Disable auto-renew and enable let-expire
PUT http://localhost:3001/api/domains/example.com/autorenew
Content-Type: application/json

{
  "autoRenew": 0,
  "letExpire": 1
}

### 21. Enable WHOIS Privacy
PUT http://localhost:3001/api/domains/example.com/whois-privacy
Content-Type: application/json

{
  "state": "enable"
}

### 22. Disable WHOIS Privacy
PUT http://localhost:3001/api/domains/testdomainalanjohnchacko.com/whois-privacy
Content-Type: application/json

{
  "state": "disable"
}

### ========================================
### ERROR TESTING FOR MODIFICATION APIs
### ========================================

### 23. Auto-renew with missing parameters
PUT http://localhost:3001/api/domains/testdomainalanjohnchacko.com/autorenew
Content-Type: application/json

{
  "autoRenew": true,
  "letExpire": false
}

### 24. Auto-renew with invalid parameters
PUT http://localhost:3001/api/domains/example.com/autorenew
Content-Type: application/json

{
  "autoRenew": "yes",
  "letExpire": "no"
}

### 25. WHOIS privacy with invalid state
PUT http://localhost:3001/api/domains/testdomainalanjohnchacko.com/whois-privacy
Content-Type: application/json

{
  "state": "on"
}

### 26. WHOIS privacy with missing state
PUT http://localhost:3001/api/domains/example.com/whois-privacy
Content-Type: application/json

{
}

### ========================================
### NAMESERVER MANAGEMENT API TESTS
### ========================================

### 36. Update Domain Nameservers (Assign)
POST http://localhost:3001/api/nameservers/update
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "op_type": "assign",
  "nameservers": ["ns1.systemdns.com", "ns2.systemdns.com"]
}

### 37. Update Domain Nameservers (Remove)
POST http://localhost:3001/api/nameservers/update
Content-Type: application/json

{
  "domain": "example.com",
  "op_type": "remove",
  "nameservers": ["ns1.example.com"]
}

### 38. Get Nameserver Information
GET http://localhost:3001/api/nameservers/ns1.example.com

### 39. Create Nameserver
POST http://localhost:3001/api/nameservers/create
Content-Type: application/json

{
  "nameserver": "ns1.example.com",
  "ip_addresses": ["192.168.1.100", "192.168.1.101"]
}

### 40. Modify Nameserver
PUT http://localhost:3001/api/nameservers/ns1.example.com
Content-Type: application/json

{
  "ip_addresses": ["192.168.1.200", "192.168.1.201"]
}

### 41. Delete Nameserver
DELETE http://localhost:3001/api/nameservers/ns1.example.com

### 42. Registry Check Nameserver
POST http://localhost:3001/api/nameservers/check
Content-Type: application/json

{
  "nameserver": "ns1.example.com",
  "tld": "com"
}

### 43. Registry Check Nameserver (All TLDs)
POST http://localhost:3001/api/nameservers/check
Content-Type: application/json

{
  "nameserver": "ns1.example.com"
}

### ========================================
### ERROR TESTING FOR NAMESERVER APIs
### ========================================

### 44. Update nameservers with missing parameters
POST http://localhost:3001/api/nameservers/update
Content-Type: application/json

{
  "domain": "example.com"
}

### 45. Update nameservers with invalid op_type
POST http://localhost:3001/api/nameservers/update
Content-Type: application/json

{
  "domain": "example.com",
  "op_type": "invalid",
  "nameservers": ["ns1.example.com"]
}

### 46. Create nameserver with missing nameserver
POST http://localhost:3001/api/nameservers/create
Content-Type: application/json

{
  "ip_addresses": ["192.168.1.100"]
}

### ========================================
### DNS RECORD MANAGEMENT API TESTS
### ========================================

### 27. Add A Record
POST http://localhost:3001/api/dns/add-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "A",
    "host": "sub",
    "value": "1.2.3.4",
    "ttl": 3600
  }
}

### 28. Update A Record
POST http://localhost:3001/api/dns/update-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "A",
    "host": "sub",
    "value": "5.6.7.8",
    "ttl": 3600
  }
}

### 29. Add CNAME Record
POST http://localhost:3001/api/dns/add-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "CNAME",
    "host": "www",
    "value": "example.com",
    "ttl": 3600
  }
}

### 30. Add MX Record
POST http://localhost:3001/api/dns/add-record
Content-Type: application/json

{
  "domain": "testdomainalanjohnchacko.com",
  "record": {
    "type": "MX",
    "host": "",
    "value": "mail.example.com",
    "priority": 10,
    "ttl": 3600
  }
}

### 31. Add TXT Record
POST http://localhost:3001/api/dns/add-record
Content-Type: application/json

{
  "domain": "example.com",
  "record": {
    "type": "TXT",
    "host": "",
    "value": "v=spf1 include:_spf.google.com ~all",
    "ttl": 3600
  }
}

### 32. Add AAAA Record
POST http://localhost:3001/api/dns/add-record
Content-Type: application/json

{
  "domain": "example.com",
  "record": {
    "type": "AAAA",
    "host": "ipv6",
    "value": "2001:db8::1",
    "ttl": 3600
  }
}

### ========================================
### ERROR TESTING FOR DNS RECORD APIs
### ========================================

### 33. Add record with missing type
POST http://localhost:3001/api/dns/add-record
Content-Type: application/json

{
  "domain": "example.com",
  "record": {
    "host": "sub",
    "value": "1.2.3.4"
  }
}

### 34. Add record with missing value/address
POST http://localhost:3001/api/dns/add-record
Content-Type: application/json

{
  "domain": "example.com",
  "record": {
    "type": "A",
    "host": "sub"
  }
}

### 35. Update record with missing domain
POST http://localhost:3001/api/dns/update-record
Content-Type: application/json

{
  "record": {
    "type": "A",
    "host": "sub",
    "value": "1.2.3.4"
  }
}

### ========================================
### NOTES
### ========================================
### 
### The combined search endpoint (/api/domains/search) performs:
### 1. NAME_SUGGEST to get domain suggestions
### 2. LOOKUP for each suggested domain to check availability  
### 3. GET_PRICE for available domains to get pricing
###
### Individual endpoints are also available for specific needs:
### - /api/domains/lookup - Single domain availability
### - /api/domains/:domain/price - Single domain pricing
### - /api/domains/suggestions - Domain name suggestions only
###
### Domain modification endpoints:
### - PUT /api/domains/:domain/autorenew - Modify auto-renew settings
### - PUT /api/domains/:domain/whois-privacy - Modify WHOIS privacy state
###
### DNS record management endpoints:
### - POST /api/dns/add-record - Add a single DNS record
### - POST /api/dns/update-record - Update a single DNS record
### - POST /api/dns/create-zone - Create DNS zone with records
### - GET /api/dns/get-zone/:domain - Get all DNS records
### - POST /api/dns/set-zone - Replace all DNS records
### - DELETE /api/dns/delete-zone/:domain - Delete DNS zone
###
### All XML requests are based on official OpenSRS documentation
### and use proper dt_assoc/dt_array structures as specified.
### ========================================
